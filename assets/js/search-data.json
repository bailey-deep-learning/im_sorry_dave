{
  
    
        "post0": {
            "title": "Isn't it strange, to create something that hates you?",
            "content": "Data Ethics . This lesson we are looking at the Ethical implications of Data Science. Because there isn&#39;t any practical lesson, I will be leaving a link to the lecture here and filling in the questionnaire for future reference . Questionnaire . Does ethics provide a list of &quot;right answers&quot;? . There is no list of do’s and dont’s. Ethics is complicated, and context-dependent. It involves the perspectives of many stakeholders. Ethics is a muscle that you have to develop and practice. In this chapter, our goal is to provide some signposts to help you on that journey. . How can working with people of different backgrounds help when considering ethical questions? . Different people’s backgrounds will help them to see things which may not be obvious to you. Working with a team is helpful for many “muscle building” activities, including this one. . What was the role of IBM in Nazi Germany? Why did the company participate as it did? Why did the workers participate? . IBM supplied the Nazis with data tabulation products necessary to track the extermination of Jews and other groups on a massive scale. This was driven from the top of the company, with marketing to Hitler and his leadership team. Company President Thomas Watson personally approved the 1939 release of special IBM alphabetizing machines to help organize the deportation of Polish Jews. Hitler awarded Watson a special “Service to the Reich” medal in 1937. . But it also happened throughout the organization. IBM and its subsidiaries provided regular training and maintenance on-site at the concentration camps: printing off cards, configuring machines, and repairing them as they broke frequently. IBM set up categorizations on their punch card system for the way that each person was killed, which group they were assigned to, and the logistical information necessary to track them through the vast Holocaust system. IBM’s code for Jews in the concentration camps was 8, where around 6,000,000 were killed. Its code for Romanis was 12 (they were labeled by the Nazis as “asocials”, with over 300,000 killed in the Zigeunerlager , or “Gypsy camp”). General executions were coded as 4, death in the gas chambers as 6. . The marketers were just doing what they could to meet their business development goals. Edwin Black, author of “IBM and the Holocaust”, said: “To the blind technocrat, the means were more important than the ends. The destruction of the Jewish people became even less important because the invigorating nature of IBM’s technical achievement was only heightened by the fantastical profits to be made at a time when bread lines stretched across the world.” . What was the role of the first person jailed in the Volkswagen diesel scandal? . It was one of the engineers, James Liang, who just did what he was told. . What was the problem with a database of suspected gang members maintained by California law enforcement officials? . A database of suspected gang members maintained by California law enforcement officials was found to be full of errors, including 42 babies who had been added to the database when they were less than 1 year old (28 of whom were marked as “admitting to being gang members”). In this case, there was no process in place for correcting mistakes or removing people once they’d been added. . Why did YouTube&#39;s recommendation algorithm recommend videos of partially clothed children to pedophiles, even though no employee at Google had programmed this feature? . The problem here is the centrality of metrics in driving a financially important system. When an algorithm has a metric to optimise, as you have seen, it will do everything it can to optimise that number. This tends to lead to all kinds of edge cases, and humans interacting with a system will search for, find, and exploit these edge cases and feedback loops for their advantage. . What are the problems with the centrality of metrics? . When an algorithm has a metric to optimise, as you have seen, it will do everything it can to optimise that number. This tends to lead to all kinds of edge cases, and humans interacting with a system will search for, find, and exploit these edge cases and feedback loops for their advantage. . Why did Meetup.com not include gender in its recommendation system for tech meetups? . Evan Estola, lead machine learning engineer at Meetup, discussed the example of men expressing more interest than women in tech meetups. taking gender into account could therefore cause Meetup’s algorithm to recommend fewer tech meetups to women, and as a result, fewer women would find out about and attend tech meetups, which could cause the algorithm to suggest even fewer tech meetups to women, and so on in a self-reinforcing feedback loop . What are the six types of bias in machine learning, according to Suresh and Guttag? . Historical Bias arises when there is a misalignment between world as it is and the values or objectives to be encoded and propagated in a model. It is a normative concern with the state of the world, and exists even given perfect sampling and feature selection. | Representation Bias arises while defining and sampling a development population. It occurs when the development population under-represents, and subsequently fails to generalize well, for some part of the use population. | Measurement Bias arises when choosing and measuring features and labels to use; these are often proxies for the desired quantities. The chosen set of features and labels may leave out important factors or introduce groupor input-dependent noise that leads to differential performance. | Aggregation Bias arises during model construction, when distinct populations are inappropriately combined. In many applications, the population of interest is heterogeneous and a single model is unlikely to suit all subgroups. | Evaluation Bias occurs during model iteration and evaluation. It can arise when the testing or external benchmark populations do not equally represent the various parts of the use population. Evaluation bias can also arise from the use of performance metrics that are not appropriate for the way in which the model will be used. | Deployment Bias occurs after model deployment, when a system is used or interpreted in inapppropriate ways. | Give two examples of historical race bias in the US. . When doctors were shown identical files, they were much less likely to recommend cardiac catheterization (a helpful procedure) to Black patients. | When bargaining for a used car, Black people were offered initial prices $700 higher and received far smaller concessions. | Responding to apartment rental ads on Craigslist with a Black name elicited fewer responses than with a white name. | An all-white jury was 16 percentage points more likely to convict a Black defendant than a white one, but when a jury had one Black member it convicted both at the same rate. | . Where are most images in ImageNet from? . The vast majority of the images are from the United States and other Western countries, leading to models trained on ImageNet performing worse on scenes from other countries and cultures . In the paper &quot;Does Machine Learning Automate Moral Hazard and Error&quot; why is sinusitis found to be predictive of a stroke? . We haven’t really measured stroke, which occurs when a region of the brain is denied oxygen due to an interruption in the blood supply. What we’ve measured is who had symptoms, went to a doctor, got the appropriate tests, and received a diagnosis of stroke. Actually having a stroke is not the only thing correlated with this complete list—it&#39;s also correlated with being the kind of person who actually goes to the doctor (which is influenced by who has access to healthcare, can afford their co-pay, doesn&#39;t experience racial or gender-based medical discrimination, and more) . What is representation bias? . Representation Bias arises while defining and sampling a development population. It occurs when the development population under-represents, and subsequently fails to generalize well, for some part of the use population. . How are machines and people different, in terms of their use for making decisions? . Machines and the Neural Networks we build with them only have the context we provide from the Data, this Data can be incompl . Is disinformation the same as &quot;fake news&quot;? . Some people think disinformation is primarily about false information or fake news, but in reality, disinformation can often contain seeds of truth, or half-truths taken out of context. Ladislav Bittman was an intelligence officer in the USSR who later defected to the US and wrote some books in the 1970s and 1980s on the role of disinformation in Soviet propaganda operations. In The KGB and Soviet Disinformation (Pergamon) he wrote, &quot;Most campaigns are a carefully designed mixture of facts, half-truths, exaggerations, and deliberate lies.&quot; . Why is disinformation through auto-generated text a particularly significant issue? . What are the five ethical lenses described by the Markkula Center? . The rights approach: Which option best respects the rights of all who have a stake? | The justice approach: Which option treats people equally or proportionately? | The utilitarian approach: Which option will produce the most good and do the least harm? | The common good approach: Which option best serves the community as a whole, not just some members? | The virtue approach: Which option leads me to act as the sort of person I want to be? | . Where is policy an appropriate tool for addressing data ethics issues? . Policies are an appropriate tool for addressing data ethics issues when is likely that design fixes, self regulation and technical approaches to addressing problems, involving ethical uses of Machine Learning are not working. . While such measures can be useful, they will not be sufficient to address the underlying problems that have led to our current state. For example, as long as it is incredibly profitable to create addictive technology, companies will continue to do so, regardless of whether this has the side effect of promoting conspiracy theories and polluting our information ecosystem. While individual designers may try to tweak product designs, we will not see substantial changes until the underlying profit incentives changes. . Because of the above it is almost certain that policies will have to be created by government to address these issues. . Further Research: . Read the article &quot;What Happens When an Algorithm Cuts Your Healthcare&quot;. How could problems like this be avoided in the future? | Research to find out more about YouTube&#39;s recommendation system and its societal impacts. Do you think recommendation systems must always have feedback loops with negative results? What approaches could Google take to avoid them? What about the government? | Read the paper &quot;Discrimination in Online Ad Delivery&quot;. Do you think Google should be considered responsible for what happened to Dr. Sweeney? What would be an appropriate response? | How can a cross-disciplinary team help avoid negative consequences? | Read the paper &quot;Does Machine Learning Automate Moral Hazard and Error&quot;. What actions do you think should be taken to deal with the issues identified in this paper? | Read the article &quot;How Will We Prevent AI-Based Forgery?&quot; Do you think Etzioni&#39;s proposed approach could work? Why? | Complete the section &quot;Analyze a Project You Are Working On&quot; in this chapter. | Consider whether your team could be more diverse. If so, what approaches might help? | Deep Learning in Practice: That&#39;s a Wrap! . Make sure that you have completed the following steps: . Connect to one of the GPU Jupyter servers recommended on the book&#39;s website. :heavy_check_mark: | Run the first notebook yourself. :heavy_check_mark: | Upload an image that you find in the first notebook; then try a few different images of different kinds to see what happens. :heavy_check_mark: | Run the second notebook, collecting your own dataset based on image search queries that you come up with. :heavy_check_mark: | Think about how you can use deep learning to help you with your own projects, including what kinds of data you could use, what kinds of problems may come up, and how you might be able to mitigate these issues in practice. :heavy_check_mark: | .",
            "url": "https://bailey-deep-learning.github.io/im_sorry_dave/jupyter/2020/12/07/Isnt_It_Strange.html",
            "relUrl": "/jupyter/2020/12/07/Isnt_It_Strange.html",
            "date": " • Dec 7, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "These aren't the droids you're looking for . . .",
            "content": "From Model to Production . In this chapter we are going to make a model that can identify either C-3PO, R2-D2 or BB-8 (Just to keep the theme of the A.I in film theme going) and to see if this neural network could outsmart Obi Wan Kenobi and his use of the Force. We are going to create a seperate GitHub repo with a simple Juypter Notebook along with our Neural Network that has been pickled ready for deployment. . . The Practice of Deep Learning . The State of Deep Learning . . Things to consider: . We have a number of applications that Deep Learning is particularly good at Vision, Text, Tabular and Recsys (Recommendation Systems). Tabular data like spreadsheets and database tables is an area where deep learning is not always the best choice, it&#39;s particularly good for things involving high cardinality variables (variables that have lots and lots of descrete levels like post codes or product ID). Deep Learning is great for those in particular. . For Text its great at things like classification and translation although it is not particularly good for conversation, that has been a huge disappointment for a lot of companies that have tried to create conversation bots. Deep Learning isn&#39;t particularly good at providing accurate information, it is good at things that sound accurate or sound compelling but we don&#39;t have great ways of actually making sure that it is correct. . One big issue for reccomendation system collaborative filtering is that Deep Learning is focused on making predictions which don&#39;t necessarily mean creating useful recommendations. We will look into that later on. . Deep Learning is also really good at Multi-Modal that means things where you&#39;ve got multiple different types of data, so you might have some Tabular data including a Text column and an Image, then some Collaborative Filtering data and combining that all together is something that Deep Learning is really good at. So for example putting captions on photos is something Deep Learning is pretty good at, although, again, it&#39;s not very good at being accurate. . Ex. It might say an image contains two birds when in fact it is an image of three birds . The Drivetrain Approach . As mentioned above Recsys predictions are different from geniune reccomendations. . Recommendation engines are a familiar example of a data product based on well-built predictive models that do not achieve an optimal objective. The current algorithms predict what products a customer will like, based on purchase history and the histories of similar customers. A company like Amazon represents every purchase that has ever been made as a giant sparse matrix, with customers as the rows and products as the columns. Once they have the data in this format, data scientists apply some form of collaborative filtering to “fill in the matrix.” For example, if customer A buys products 1 and 10, and customer B buys products 1, 2, 4, and 10, the engine will recommend that A buy 2 and 4. These models are good at predicting whether a customer will like a given product, but they often suggest products that the customer already knows about or has already decided not to buy. Amazon’s recommendation engine is probably the best one out there, but it’s easy to get it to show its warts. Here is a screenshot of the “Customers Who Bought This Item Also Bought” feed on Amazon from a search for the latest book in Terry Pratchett’s “Discworld series:” . See article here . . Define an objective | Understand the levers: what inputs can you control? | What data can you collect? | Model the levers in order to understand how they affect the objective. | . Gathering Data . Now that we have defined our objective: . Find the droids! . We should now collect some data about what the droids look like. Having set up a Microsoft Azure account, and even posted about where you can find the Image Search Api key in my first blog post, having tested the search capabilities of Microsoft Bing I was in fact sorely dissappointed. . . If the internet was unable to find the droids I was looking for, how on earth was I going to train a model that could?! Luckily the Open Source community and the search_images_ddg function was able to do a much better job. Thanks Duck Duck Go! . For future reference, there is a cheeky way of downloading images from a Google Image Search in this great Juypter notebook. . search_images_ddg . &lt;function fastbook.search_images_ddg(term, max_images=200)&gt; . results = search_images_ddg(&#39;c3po&#39;, max_images=150) ims = results.attrgot(&#39;content_url&#39;) len(ims) . 188 . dest = &#39;../images/c3po.jpg&#39; download_url(ims[0], dest) . im = Image.open(dest) im.to_thumb(128,128) . droid_types = &#39;c3po&#39;,&#39;r2d2&#39;,&#39;bb8&#39; path = Path(&#39;droids&#39;) . if not path.exists(): path.mkdir() . for o in droid_types: dest = (path/o) dest.mkdir(exist_ok=True) results = search_images_ddg(f&#39;{o} robot&#39;, max_images=150) for i, result in enumerate(results): try: download_url(result, (dest/f&#39;{str(i).zfill(8)}.jpg&#39;)) except: pass . fns = get_image_files(path) fns . (#517) [Path(&#39;droids/c3po/00000000.jpg&#39;),Path(&#39;droids/c3po/00000001.jpg&#39;),Path(&#39;droids/c3po/00000002.jpg&#39;),Path(&#39;droids/c3po/00000003.jpg&#39;),Path(&#39;droids/c3po/00000004.jpg&#39;),Path(&#39;droids/c3po/00000005.jpg&#39;),Path(&#39;droids/c3po/00000006.jpg&#39;),Path(&#39;droids/c3po/00000007.jpg&#39;),Path(&#39;droids/c3po/00000008.jpg&#39;),Path(&#39;droids/c3po/00000009.jpg&#39;)...] . failed = verify_images(fns) failed . (#69) [Path(&#39;droids/c3po/00000010.jpg&#39;),Path(&#39;droids/c3po/00000011.jpg&#39;),Path(&#39;droids/c3po/00000014.jpg&#39;),Path(&#39;droids/c3po/00000022.jpg&#39;),Path(&#39;droids/c3po/00000036.jpg&#39;),Path(&#39;droids/c3po/00000043.jpg&#39;),Path(&#39;droids/c3po/00000047.jpg&#39;),Path(&#39;droids/c3po/00000048.jpg&#39;),Path(&#39;droids/c3po/00000049.jpg&#39;),Path(&#39;droids/c3po/00000050.jpg&#39;)...] . failed.map(Path.unlink); . From Data to DataLoaders . droids = DataBlock( blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128)) . dls = droids.dataloaders(path) . dls.valid.show_batch(max_n=4, nrows=1) . droids = droids.new(item_tfms=Resize(128, ResizeMethod.Squish)) dls = droids.dataloaders(path) dls.valid.show_batch(max_n=4, nrows=1) . droids = droids.new(item_tfms=Resize(128, ResizeMethod.Pad, pad_mode=&#39;zeros&#39;)) dls = droids.dataloaders(path) dls.valid.show_batch(max_n=4, nrows=1) . droids = droids.new(item_tfms=RandomResizedCrop(128, min_scale=0.3)) dls = droids.dataloaders(path) dls.train.show_batch(max_n=4, nrows=1, unique=True) . Data Augmentation . droids = droids.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2)) dls = droids.dataloaders(path) dls.train.show_batch(max_n=8, nrows=2, unique=True) . Training Your Model, and Using It to Clean Your Data . droids = droids.new( item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms()) dls = droids.dataloaders(path) . learn = cnn_learner(dls, resnet18, metrics=error_rate) learn.fine_tune(4) . Downloading: &#34;https://download.pytorch.org/models/resnet18-5c106cde.pth&#34; to /root/.cache/torch/hub/checkpoints/resnet18-5c106cde.pth . . epoch train_loss valid_loss error_rate time . 0 | 1.321286 | 0.495739 | 0.168539 | 00:07 | . epoch train_loss valid_loss error_rate time . 0 | 0.364726 | 0.363366 | 0.101124 | 00:09 | . 1 | 0.305098 | 0.292085 | 0.067416 | 00:08 | . 2 | 0.270196 | 0.287403 | 0.056180 | 00:08 | . 3 | 0.240431 | 0.287775 | 0.067416 | 00:08 | . interp = ClassificationInterpretation.from_learner(learn) interp.plot_confusion_matrix() . interp.plot_top_losses(5, nrows=1) . cleaner = ImageClassifierCleaner(learn) cleaner . Turning Your Model into an Online Application . Using the Model for Inference . learn.export() . path = Path() path.ls(file_exts=&#39;.pkl&#39;) . (#1) [Path(&#39;export.pkl&#39;)] . learn_inf = load_learner(path/&#39;export.pkl&#39;) . learn_inf.predict(&#39;../images/c3po.jpg&#39;) . (&#39;c3po&#39;, tensor(1), tensor([8.2749e-08, 1.0000e+00, 2.3360e-09])) . learn_inf.dls.vocab . [&#39;bb8&#39;, &#39;c3po&#39;, &#39;r2d2&#39;] . Creating a Notebook App from the Model . btn_upload = widgets.FileUpload() btn_upload . img = PILImage.create(btn_upload.data[-1]) . out_pl = widgets.Output() out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) out_pl . . pred,pred_idx,probs = learn_inf.predict(img) . lbl_pred = widgets.Label() lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; lbl_pred . btn_run = widgets.Button(description=&#39;Classify&#39;) btn_run . def on_click_classify(change): img = PILImage.create(btn_upload.data[-1]) out_pl.clear_output() with out_pl: display(img.to_thumb(128,128)) pred,pred_idx,probs = learn_inf.predict(img) lbl_pred.value = f&#39;Prediction: {pred}; Probability: {probs[pred_idx]:.04f}&#39; btn_run.on_click(on_click_classify) . VBox([widgets.Label(&#39;Select your droid!&#39;), btn_upload, btn_run, out_pl, lbl_pred]) . Turning Your Notebook into a Real App . . GitHub Binder . Questionnaire . Provide an example of where the droid classification model might work poorly in production, due to structural or style differences in the training data. . There are many cases that the droid classification model could fail, especially if these cases were not represented in the training data: . The droid is partially obstructed | Nighttime images are passed into the model | Low-resolution images are passed into the model | The droid is far away from the camera | The droid training dataset is highly biased towards one type of features (eg. color) | . Where do text models currently have a major deficiency? . Text models can generate context-appropriate text (like replies or imitating author style). However, text models still struggle with correct responses. Given factual information (such as a knowledge base), it is still hard to generate responses that utilizes this information to generate factually correct responses, though the text can seem very compelling. This can be very dangerous, as the layman may not be able to evaluate the factual accuracy of the generated text. . What are possible negative societal implications of text generation models? . The ability for text generation models to generate context-aware, highly compelling responses can be used at a massive scale to spread disinformation (“fake news”) and encourage conflict. . Models reinforce bias (like gender bias, racial bias) in training data and create a vicious cycle of biased outputs. . In situations where a model might make mistakes, and those mistakes could be harmful, what is a good alternative to automating a process? . The predictions of the model could be reviewed by human experts for them to evaluate the results and determine what is the best next step. This is especially true for applying machine learning for medical diagnoses. For example, a machine learning model for identifying strokes in CT scans can alert high priority cases for expedited review, while other cases are still sent to radiologists for review. Or other models can also augment the medical professional’s abilities, reducing risk but still improving efficiency of the workflow. For example, deep learning models can provide useful measurements for radiologists or pathologists. . What kind of tabular data is deep learning particularly good at? . Deep learning is good at analyzing tabular data that includes natural language, or high cardinality categorical columns (containing larger number of discrete choices like zip code). . What&#39;s a key downside of directly using a deep learning model for recommendation systems? . Machine learning approaches for recommendation systems will often only tell what products a user might like, and may not be recommendations that would be helpful to the user. For example, if a user is familiar with other books from the same author, it isn’t helpful to recommend those products even though the user bought the author’s book. Or, recommending products a user may have already purchased. . What are the steps of the Drivetrain Approach? . . How do the steps of the Drivetrain Approach map to a recommendation system? . The objective of a recommendation engine is to drive additional sales by surprising and delighting the customer with recommendations of items they would not have purchased without the recommendation. The lever is the ranking of the recommendations. New data must be collected to generate recommendations that will cause new sales . This will require conducting many randomized experiments in order to collect data about a wide range of recommendations for a wide range of customers. This is a step that few organizations take; but without it, you don’t have the information you need to actually optimize recommendations based on your true objective (more sales!) . Create an image recognition model using data you curate, and deploy it on the web. . See above . What is DataLoaders? . The DataLoaders class is the class that passes the data to the fastai model. It is essentially a class that stores the required Dataloader objects (usually for train and validation sets). . What four things do we need to tell fastai to create DataLoaders? . what kinds of data we are working with | how to get the list of items | how to label these items | how to create the validation set | . What does the splitter parameter to DataBlock do? . In fastai DataBlock, you provide the splitter argument a way for fastai to split up the dataset into subsets (usually train and validation set). For example, to randomly split the data, you can use fastai’s predefined RandomSplitter class, providing it with the proportion of the data used for validation. . How do we ensure a random split always gives the same validation set? . It turns out it is impossible for our computers to generate truly random numbers. Instead, they use a process known as a pseudo-random generator. However, this process can be controlled using a random seed. By setting a random seed value, the pseudo-random generator will generate the “random” numbers in a fixed manner and it will be the same for every run. Using a random seed, we can generate a random split that gives the same validation set always. . What letters are often used to signify the independent and dependent variables? . x is independent. y is dependent. . What&#39;s the difference between the crop, pad, and squish resize approaches? When might you choose one over the others? . crop is the default Resize() method, and it crops the images to fit a square shape of the size requested, using the full width or height. This can result in losing some important details. For instance, if we were trying to recognize the breed of dog or cat, we may end up cropping out a key part of the body or the face necessary to distinguish between similar breeds. . pad is an alternative Resize() method, which pads the matrix of the image’s pixels with zeros (which shows as black when viewing the images). If we pad the images then we have a whole lot of empty space, which is just wasted computation for our model, and results in a lower effective resolution for the part of the image we actually use. . squish is another alternative Resize() method, which can either squish or stretch the image. This can cause the image to take on an unrealistic shape, leading to a model that learns that things look different to how they actually are, which we would expect to result in lower accuracy. . Which resizing method to use therefore depends on the underlying problem and dataset. For example, if the features in the dataset images take up the whole image and cropping may result in loss of information, squishing or padding may be more useful. . Another better method is RandomResizedCrop, in which we crop on a randomly selected region of the image. So every epoch, the model will see a different part of the image and will learn accordingly. . What is data augmentation? Why is it needed? . Data augmentation refers to creating random variations of our input data, such that they appear different, but not so different that it changes the meaning of the data. Examples include flipping, rotation, perspective warping, brightness changes, etc. Data augmentation is useful for the model to better understand the basic concept of what an object is and how the objects of interest are represented in images. Therefore, data augmentation allows machine learning models to generalize . This is especially important when it can be slow and expensive to label data. . What is the difference between item_tfms and batch_tfms? . item_tfms are transformations applied to a single data sample x on the CPU. Resize() is a common transform because the mini-batch of input images to a cnn must have the same dimensions. Assuming the images are RGB with 3 channels, then Resize() as item_tfms will make sure the images have the same width and height. . batch_tfms are applied to batched data samples (aka individual samples that have been collated into a mini-batch) on the GPU. They are faster and more efficient than item_tfms. A good example of these are the ones provided by aug_transforms(). Inside are several batch-level augmentations that help many models. . What is a confusion matrix? . A class confusion matrix is a representation of the predictions made vs the correct labels. The rows of the matrix represent the actual labels while the columns represent the predictions. Therefore, the number of images in the diagonal elements represent the number of correctly classified images, while the off-diagonal elements are incorrectly classified images. Class confusion matrices provide useful information about how well the model is doing and which classes the model might be confusing . . What does export save? . export saves both the architecture, as well as the trained parameters of the neural network architecture. It also saves how the DataLoaders are defined. . What is it called when we use a model for getting predictions, instead of training? . Inference . What are IPython widgets? . IPython widgets are JavaScript and Python combined functionalities that let us build and interact with GUI components directly in a Jupyter notebook. An example of this would be an upload button, which can be created with the Python function widgets.FileUpload(). . When might you want to use CPU for deployment? When might GPU be better? . GPUs are best for doing identical work in parallel. If you will be analyzing single pieces of data at a time (like a single image or single sentence), then CPUs may be more cost effective instead, especially with more market competition for CPU servers versus GPU servers. GPUs could be used if you collect user responses into a batch at a time, and perform inference on the batch. This may require the user to wait for model predictions. Additionally, there are many other complexities when it comes to GPU inference, like memory management and queuing of the batches. . What are the downsides of deploying your app to a server, instead of to a client (or edge) device such as a phone or PC? . The application will require network connection, and there will be extra network latency time when submitting input and returning results. Additionally, sending private data to a network server can lead to security concerns. . What are three examples of problems that could occur when rolling out a bear warning system in practice? . The model we trained will likely perform poorly when: . Handling night-time images | Dealing with low-resolution images (ex: some smartphone images) | The model returns prediction too slowly to be useful | . What is &quot;out-of-domain data&quot;? . Data that is fundamentally different in some aspect compared to the model’s training data. For example, an object detector that was trained exclusively with outside daytime photos is given a photo taken at night. . What is &quot;domain shift&quot;? . This is when the type of data changes gradually over time. For example, an insurance company is using a deep learning model as part of their pricing algorithm, but over time their customers will be different, with the original training data not being representative of current data, and the deep learning model being applied on effectively out-of-domain data. . What are the three steps in the deployment process? . Manual process – the model is run in parallel and not directly driving any actions, with humans still checking the model outputs. | Limited scope deployment – The model’s scope is limited and carefully supervised. For example, doing a geographically and time-constrained trial of model deployment, that is carefully supervised. | Gradual expansion – The model scope is gradually increased, while good reporting systems are implemented in order to check for any significant changes to the actions taken compared to the manual process (i.e. the models should perform similarly to the humans, unless it is already anticipated to be better). | . Further Research . Consider how the Drivetrain Approach maps to a project or problem you&#39;re interested in. | When might it be best to avoid certain types of data augmentation? | For a project you&#39;re interested in applying deep learning to, consider the thought experiment &quot;What would happen if it went really, really well?&quot; | Start a blog, and write your first blog post. For instance, write about what you think deep learning might be useful for in a domain you&#39;re interested in. |",
            "url": "https://bailey-deep-learning.github.io/im_sorry_dave/jupyter/2020/12/03/These-Arent-The-Droids.html",
            "relUrl": "/jupyter/2020/12/03/These-Arent-The-Droids.html",
            "date": " • Dec 3, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Greetings, programs!",
            "content": "My Strategy . The incredible team at fast.ai have selflessly opened the source of their book Deep Learning for Coders with fastai &amp; Pytorch along with stripped down juypter notebooks to aid with the students understanding of the course work. By utilising these stripped down notebooks, running them on my notebook server of choice, Paperspace Gradient, reading the code and understanding the output, I can then download them and fill in my notes as the basis of my blog post. This is exactly what I am doing today. This way I will have comprehensive notes for each chapter available in one place for easy reference. . The Software: PyTorch, fastai, and Jupyter . The Software Stack . . fastai is a high level api build on top of PyTorch which in turn is built on top of Python, which means that what you can do in PyTorch you can do in fastai. This is incredibly powerful, it allows us as developers to work in as highly abstracted manner as we like, opening the door for people who want to use these tools at which ever level they feel comfortable. . Lets look a couple of example of how this translates: . with torch.no_grad(): model.eval() for batch in dl: preds = model(batch) . Let&#39;s say, for example, I was trying to get some predictions across an entire data loader, which could be a series of images. In PyTorch the inferance loop would look something like the code above, in contrast: . learn.get_preds(dl=dl) . fastai has a very simple get_preds function . Lets say I want to deploy my model, and so my inference code for PyTorch might look something like this: . im = Image.open(image_name) c = transforms.Resize(224) t = transforms.ToTensor() n = transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]) loader = transforms.Compose([c, t, n]) im = load(im).float() im = Variable(im, requires_grad=True) im = im.unsqueeze(0) im = im.cuda() . Here I prepare my transfroms, I compose them all together into a pipeline, pass my image through, then convert it to a tensor, then move it onto the GPU, then eventually I can call my model and repeat what we did above. In fastai it&#39;s trivial: . learn.predict(image_name) . This will automatically do all of the above for us. The PyTorch code although realtively straightforward and procedural can be intimidating for new users, there are a number of steps that are required to get things working. With fastai this process is democratized and allows people to start working with these tools far faster. . A Layered API . . fastai has what it calls a Layered API, what that means is that every aspect of the data processing pipeline can be fully customizable. To sum it up in five steps: . You would first efine what your datablocks are and these blocks would determine your input and your outputs. So if I was doing a classification problem with images, I might chosse and image block for my inputs and a catagory block for my outputs since I want to predict a catagory. | You would then tell fastai how I would like to get my data | Split that data | How you would like to label it | Then creating a DataLoader object that has all the data inside of it, along with any image augmentations that might happen and any normalizations | So lets look a few examples: . Here is what a segmentation DataBlock might look like: . seg_dls = DataBlock(blocks=(ImageBlock, MaskBlock), get_items=get_image_files, get_y=get_y, splitter=RandomSplitter(), batch_tfms=batch_tfms) . Here is what a GAN DataBlock might look like: . gan_dls = DataBlock(blocks=(ImageBlock, ImageBlock), get_items=get_image_files, get_y=get_y, splitter=RandomSplitter(), item_tfms=item_tfms, batch_tfms=batch_tfms) . Here is what a text classification DataBlock might look like: . txt_dls = DataBlock(blocks=(TextBlock.from_df(&#39;text&#39;), CatagoryBlock()), get_x=ColReader(&#39;text&#39;), get_y=ColReader(&#39;label&#39;), splitter=ColSplitter()) . As you can see from an API standpoint our interface to the Layered API is very simple and intuitive, allowing us a unified interface no matter what the type of problem we are trying to solve. Ultimately we are defining our input and output data types, telling fastai how we are going to get our data, how that data will be split up and labeled and perform any transforms or augmentations on that data ready for training. . Following this approach we can fit almost any problem into this nice and easy to follow framework. Let&#39;s check out my first model in depth. . My First Model . fastai&#39;s top down teaching methodology gives you the keys to car straight away, showing you what is possible with deep learning frameworks and get&#39;s upi producing world class models in a very short period of time. . So how does fastai successfully simplify the entire training pipeline? . My first model can tell if an image is either a cat or a dog with 99% accuracy in only 10 lines of code! (And we can have it ready for deployment by adding 1 more line, but more about that in Chapter 2). What is even more incredible is that it took only a few minutes to train! This is the code in it&#39;s entirety below: . from fastai.vision.all import * path = untar_data(URLs.PETS)/&#39;images&#39; def is_cat(x): return x[0].isupper() dls = ImageDataLoaders.from_name_func( path, get_image_files(path), valid_pct=0.2, seed=42, label_func=is_cat, item_tfms=Resize(224)) learn = cnn_learner(dls, resnet34, metrics=error_rate) learn.fine_tune(1) . epoch train_loss valid_loss error_rate time . 0 | 0.161289 | 0.021331 | 0.009472 | 00:30 | . epoch train_loss valid_loss error_rate time . 0 | 0.067894 | 0.041609 | 0.010149 | 00:36 | . Why so much Magic? . In some cases magic and obfuscation can be pretty bad, so why abstract the process like this? Through intensive experimentation, the fastai team have been able to find some pretty good default parameters that give good results on most tasks. This includes the learning rate, the hyper parameters to set for your optimizer and what this allows is that you can go from start-to-finish with a pretty wide range of standard problems without a whole lot of heavy lifting . . Most libraries that decide to lean into using magic / obfuscation tend to try and keep you away from the implementation, but fastai with its layered API approach you can remove more and more of the layers of obfuscation the further down the pipeline you go. To that end you can use a raw PyTorch data loader and a model, since fastai models are PyTorch models and you can simply use fastai as a training framework. . Here are some great resources to keep in mind as you learn: . Zachary Mueller Notebooks . Walk with fastai . The fastai Forum . Testing the model . uploader = widgets.FileUpload() uploader . . img = PILImage.create(uploader.data[0]) is_cat,_,probs = learn.predict(img) print(f&quot;Is this a cat?: {is_cat}.&quot;) print(f&quot;Probability it&#39;s a cat: {probs[1].item():.6f}&quot;) . Is this a cat?: False. Probability it&#39;s a cat: 0.000047 . Limitations Inherent To Machine Learning . A model cannot be created without data. | A model can only learn to operate on the patterns seen in the input data used to train it. | This learning approach only creates predictions, not recommended actions. | It&#39;s not enough to just have examples of input data; we need labels for that data too (e.g., pictures of dogs and cats aren&#39;t enough to train a model; we need a label for each one, saying which ones are dogs, and which are cats). | . Deep Learning Is Not Just for Image Classification . path = untar_data(URLs.CAMVID_TINY) dls = SegmentationDataLoaders.from_label_func( path, bs=8, fnames = get_image_files(path/&quot;images&quot;), label_func = lambda o: path/&#39;labels&#39;/f&#39;{o.stem}_P{o.suffix}&#39;, codes = np.loadtxt(path/&#39;codes.txt&#39;, dtype=str) ) learn = unet_learner(dls, resnet34) learn.fine_tune(8) . epoch train_loss valid_loss time . 0 | 2.637404 | 2.316639 | 00:02 | . epoch train_loss valid_loss time . 0 | 1.773122 | 1.583480 | 00:02 | . 1 | 1.544705 | 1.252534 | 00:02 | . 2 | 1.398063 | 1.001754 | 00:02 | . 3 | 1.248483 | 0.803304 | 00:02 | . 4 | 1.113762 | 0.768532 | 00:02 | . 5 | 1.003168 | 0.729955 | 00:02 | . 6 | 0.912422 | 0.711288 | 00:02 | . 7 | 0.839843 | 0.701163 | 00:02 | . learn.show_results(max_n=6, figsize=(7,8)) . from fastai.tabular.all import * path = untar_data(URLs.ADULT_SAMPLE) dls = TabularDataLoaders.from_csv(path/&#39;adult.csv&#39;, path=path, y_names=&quot;salary&quot;, cat_names = [&#39;workclass&#39;, &#39;education&#39;, &#39;marital-status&#39;, &#39;occupation&#39;, &#39;relationship&#39;, &#39;race&#39;], cont_names = [&#39;age&#39;, &#39;fnlwgt&#39;, &#39;education-num&#39;], procs = [Categorify, FillMissing, Normalize]) learn = tabular_learner(dls, metrics=accuracy) . learn.fit_one_cycle(3) . epoch train_loss valid_loss accuracy time . 0 | 0.364839 | 0.359383 | 0.835227 | 00:05 | . 1 | 0.353714 | 0.349704 | 0.836916 | 00:05 | . 2 | 0.345267 | 0.347448 | 0.838298 | 00:05 | . from fastai.collab import * path = untar_data(URLs.ML_SAMPLE) dls = CollabDataLoaders.from_csv(path/&#39;ratings.csv&#39;) learn = collab_learner(dls, y_range=(0.5,5.5)) learn.fine_tune(10) . epoch train_loss valid_loss time . 0 | 1.523289 | 1.381516 | 00:00 | . epoch train_loss valid_loss time . 0 | 1.396122 | 1.319708 | 00:00 | . 1 | 1.277794 | 1.132567 | 00:00 | . 2 | 1.022374 | 0.830664 | 00:00 | . 3 | 0.800652 | 0.694179 | 00:00 | . 4 | 0.700407 | 0.659416 | 00:00 | . 5 | 0.658882 | 0.647847 | 00:00 | . 6 | 0.638177 | 0.643430 | 00:00 | . 7 | 0.621591 | 0.641302 | 00:00 | . 8 | 0.607097 | 0.640517 | 00:00 | . 9 | 0.607002 | 0.640406 | 00:00 | . learn.show_results() . userId movieId rating rating_pred . 0 5.0 | 81.0 | 5.0 | 4.451847 | . 1 68.0 | 76.0 | 2.0 | 3.938959 | . 2 88.0 | 97.0 | 3.5 | 3.962249 | . 3 55.0 | 78.0 | 2.5 | 3.165076 | . 4 34.0 | 67.0 | 5.0 | 4.236149 | . 5 39.0 | 55.0 | 4.0 | 4.179371 | . 6 5.0 | 44.0 | 4.0 | 3.103317 | . 7 13.0 | 57.0 | 4.0 | 4.266764 | . 8 16.0 | 33.0 | 4.0 | 3.128462 | . Questionnaire . Do you need these for deep learning? . Lots of math - False | Lots of data - False | Lots of expensive computers - False | A PhD - False | . Name five areas where deep learning is now the best in the world. . Any five of the following: . Natural Language Processing (NLP) – Question Answering, Document Summarization and Classification, etc. | Computer Vision – Satellite and drone imagery interpretation, face detection and recognition, image captioning, etc. | Medicine – Finding anomalies in medical images (ex: CT, X-ray, MRI), detecting features in tissue slides (pathology), diagnosing diabetic retinopathy, etc. | Biology – Folding proteins, classifying, genomics tasks, cell classification, etc. | Image generation/enhancement – colorizing images, improving image resolution (super-resolution), removing noise from images (denoising), converting images to art in style of famous artists (style transfer), etc. | Recommendation systems – web search, product recommendations, etc. | Playing games – Super-human performance in Chess, Go, Atari games, etc | Robotics – handling objects that are challenging to locate (e.g. transparent, shiny, lack of texture) or hard to pick up | Other applications – financial and logistical forecasting; text to speech; much much more. | . What was the name of the first device that was based on the principle of the artificial neuron? . Mark I perceptron built by Frank Rosenblatt . Based on the book of the same name, what are the requirements for parallel distributed processing (PDP)? . A set of processing units | A state of activation | An output function for each unit | A pattern of connectivity among units | A propagation rule for propagating patterns of activities through the network of connectivities | An activation rule for combining the inputs impinging on a unit with the current state of that unit to produce a new level of activation for the unit | A learning rule whereby patterns of connectivity are modified by experience | An environment within which the system must operate | . What were the two theoretical misunderstandings that held back the field of neural networks? . In 1969, Marvin Minsky and Seymour Papert demonstrated in their book, “Perceptrons”, that a single layer of artificial neurons cannot learn simple, critical mathematical functions like XOR logic gate. While they subsequently demonstrated in the same book that additional layers can solve this problem, only the first insight was recognized, leading to the start of the first AI winter. . In the 1980’s, models with two layers were being explored. Theoretically, it is possible to approximate any mathematical function using two layers of artificial neurons. However, in practices, these networks were too big and too slow. While it was demonstrated that adding additional layers improved performance, this insight was not acknowledged, and the second AI winter began. In this past decade, with increased data availability, and improvements in computer hardware (both in CPU performance but more importantly in GPU performance), neural networks are finally living up to its potential. . What is a GPU? . GPU stands for Graphics Processing Unit (also known as a graphics card). Standard computers have various components like CPUs, RAM, etc. CPUs, or central processing units, are the core units of all standard computers, and they execute the instructions that make up computer programs. GPUs, on the other hand, are specialized units meant for displaying graphics, especially the 3D graphics in modern computer games. The hardware optimizations used in GPUs allow it to handle thousands of tasks at the same time. Incidentally, these optimizations allow us to run and train neural networks hundreds of times faster than a regular CPU. . Open a notebook and execute a cell containing: 1+1. What happens? . In a Jupyter Notebook, we can create code cells and run code in an interactive manner. When we execute a cell containing some code (in this case: 1+1), the code is run by Python and the output is displayed underneath the code cell (in this case: 2). . Follow through each cell of the stripped version of the notebook for this chapter. Before executing each cell, guess what will happen. . See Above . . . . Complete the Jupyter Notebook online appendix. . Why is a GPU useful for deep learning? How is a CPU different, and why is it less effective for deep learning? | Try to think of three areas where feedback loops might impact the use of machine learning. See if you can find documented examples of that happening in practice. | Why is it hard to use a traditional computer program to recognize images in a photo? . Why is a GPU useful for deep learning? How is a CPU different, and why is it less effective for deep learning? | Try to think of three areas where feedback loops might impact the use of machine learning. See if you can find documented examples of that happening in practice. | What did Samuel mean by &quot;weight assignment&quot;? . “weight assignment” refers to the current values of the model parameters. Arthur Samuel further mentions an “ automatic means of testing the effectiveness of any current weight assignment ” and a “ mechanism for altering the weight assignment so as to maximize the performance ”. This refers to the evaluation and training of the model in order to obtain a set of parameter values that maximizes model performance. . What term do we normally use in deep learning for what Samuel called &quot;weights&quot;? . We instead use the term parameters. In deep learning, the term “weights” has a separate meaning. (The neural network has various parameters that we fit our data to. As shown in upcoming chapters, the two types of neural network parameters are weights and biases) . Draw a picture that summarizes Samuel&#39;s view of a machine learning model. . . Why is it hard to understand why a deep learning model makes a particular prediction? . This is a highly-researched topic known as interpretability of deep learning models. Deep learning models are hard to understand in part due to their “deep” nature. Think of a linear regression model. Simply, we have some input variables/data that are multiplied by some weights, giving us an output. We can understand which variables are more important and which are less important based on their weights. A similar logic might apply for a small neural network with 1-3 layers. However, deep neural networks have hundreds, if not thousands, of layers. It is hard to determine which factors are important in determining the final output. The neurons in the network interact with each other, with the outputs of some neurons feeding into other neurons. Altogether, due to the complex nature of deep learning models, it is very difficult to understand why a neural network makes a given prediction. . However, in some cases, recent research has made it easier to better understand a neural network’s prediction. For example, as shown in this chapter, we can analyze the sets of weights and determine what kind of features activate the neurons. When applying CNNs to images, we can also see which parts of the images highly activate the model. We will see how we can make our models interpretable later in the book. . What is the name of the theorem that shows that a neural network can solve any mathematical problem to any level of accuracy? . The universal approximation theorem states that neural networks can theoretically represent any mathematical function. However, it is important to realize that practically, due to the limits of available data and computer hardware, it is impossible to practically train a model to do so. But we can get very close! . What do you need in order to train a model? . You will need an architecture for the given problem. You will need data to input to your model. For most use-cases of deep learning, you will need labels for your data to compare your model predictions to. You will need a loss function that will quantitatively measure the performance of your model. And you need a way to update the parameters of the model in order to improve its performance (this is known as an optimizer). . How could a feedback loop impact the rollout of a predictive policing model? . In a predictive policing model, we might end up with a positive feedback loop, leading to a highly biased model with little predictive power. For example, we may want a model that would predict crimes, but we use information on arrests as a proxy . However, this data itself is slightly biased due to the biases in existing policing processes. Training with this data leads to a biased model. Law enforcement might use the model to determine where to focus police activity, increasing arrests in those areas. These additional arrests would be used in training future iterations of models, leading to an even more biased model. This cycle continues as a positive feedback loop . Do we always have to use 224×224-pixel images with the cat recognition model? . No we do not. 224x224 is commonly used for historical reasons. You can increase the size and get better performance, but at the price of speed and memory consumption. . What is the difference between classification and regression? . Classification is focused on predicting a class or category (ex: type of pet). Regression is focused on predicting a numeric quantity (ex: age of pet). . What is a validation set? What is a test set? Why do we need them? . The validation set is the portion of the dataset that is not used for training the model, but for evaluating the model during training, in order to prevent overfitting. This ensures that the model performance is not due to “cheating” or memorization of the dataset, but rather because it learns the appropriate features to use for prediction. However, it is possible that we overfit the validation data as well. This is because the human modeler is also part of the training process, adjusting hyperparameters (see question 32 for definition) and training procedures according to the validation performance. Therefore, another unseen portion of the dataset, the test set, is used for final evaluation of the model. This splitting of the dataset is necessary to ensure that the model generalizes to unseen data. . What will fastai do if you don&#39;t provide a validation set? . fastai will automatically create a validation dataset. It will randomly take 20% of the data and assign it as the validation set ( valid_pct = 0.2 ). . Can we always use a random sample for a validation set? Why or why not? . A good validation or test set should be representative of new data you will see in the future. Sometimes this isn’t true if a random sample is used. For example, for time series data, selecting sets randomly does not make sense. Instead, defining different time periods for the train, validation, and test set is a better approach. . What is overfitting? Provide an example. . Overfitting is the most challenging issue when it comes to training machine learning models. Overfitting refers to when the model fits too closely to a limited set of data but does not generalize well to unseen data. This is especially important when it comes to neural networks, because neural networks can potentially “memorize” the dataset that the model was trained on, and will perform abysmally on unseen data because it didn’t “memorize” the ground truth values for that data. This is why a proper validation framework is needed by splitting the data into training, validation, and test sets. . What is a metric? How does it differ from &quot;loss&quot;? . A metric is a function that measures quality of the model’s predictions using the validation set. This is similar to the ­ loss , which is also a measure of performance of the model. However, loss is meant for the optimization algorithm (like SGD) to efficiently update the model parameters, while metrics are human-interpretable measures of performance. Sometimes, a metric may also be a good choice for the loss. . How can pretrained models help? . Pretrained models have been trained on other problems that may be quite similar to the current task. For example, pretrained image recognition models were often trained on the ImageNet dataset, which has 1000 classes focused on a lot of different types of visual objects. Pretrained models are useful because they have already learned how to handle a lot of simple features like edge and color detection. However, since the model was trained for a different task than already used, this model cannot be used as is. . What is the &quot;head&quot; of a model? . When using a pretrained model, the later layers of the model, which were useful for the task that the model was originally trained on, are replaced with one or more new layers with randomized weights, of an appropriate size for the dataset you are working with. These new layers are called the “head” of the model. . What kinds of features do the early layers of a CNN find? How about the later layers? . Earlier layers learn simple features like diagonal, horizontal, and vertical edges. Later layers learn more advanced features like car wheels, flower petals, and even outlines of animals. . Are image models only useful for photos? . No! Image models can be useful for other types of images like sketches, medical data, etc. . However, a lot of information can be represented as images . For example, a sound can be converted into a spectrogram, which is a visual interpretation of the audio. Time series (ex: financial data) can be converted to image by plotting on a graph. Even better, there are various transformations that generate images from time series, and have achieved good results for time series classification. There are many other examples, and by being creative, it may be possible to formulate your problem as an image classification problem, and use pretrained image models to obtain state-of-the-art results! . What is an &quot;architecture&quot;? . The architecture is the template or structure of the model we are trying to fit. It defines the mathematical model we are trying to fit. . What is segmentation? . At its core, segmentation is a pixelwise classification problem. We attempt to predict a label for every single pixel in the image. This provides a mask for which parts of the image correspond to the given label. . What is y_range used for? When do we need it? . y_range is being used to limit the values predicted when our problem is focused on predicting a numeric value in a given range (ex: predicting movie ratings, range of 0.5-5). . What are &quot;hyperparameters&quot;? . Training models requires various other parameters that define how the model is trained. For example, we need to define how long we train for, or what learning rate (how fast the model parameters are allowed to change) is used. These sorts of parameters are hyperparameters. . What&#39;s the best way to avoid failures when using AI in an organization? . Key things to consider when using AI in an organization: . Make sure a training, validation, and testing set is defined properly in order to evaluate the model in an appropriate manner. | Try out a simple baseline, which future models should hopefully beat. Or even this simple baseline may be enough in some cases. | .",
            "url": "https://bailey-deep-learning.github.io/im_sorry_dave/jupyter/2020/12/02/Greetings-Programs.html",
            "relUrl": "/jupyter/2020/12/02/Greetings-Programs.html",
            "date": " • Dec 2, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "HAL O World",
            "content": "Learning to Deep Learn . . . So today is a monumental day in the field of deep learning, AlphaFold by DeepMind has been recognised as a solution to the “protein folding problem” and marks the end of a challenge set over 50 years ago. This breakthrough demonstrates the impact AI can have on scientific discovery and its potential to dramatically accelerate progress in some of the most fundamental fields that explain and shape our world. So now is as good a time as any to really get involved and start learning to Deep Learn. . Deep Learning for Coders . To ensure that I am making good progress, creating practical models and work as effectiently as possible I will be working through the book &quot;Deep Learning for Coders with fastai and PyTorch&quot;, not only is there a great online portal with a video walk through of the curriculum, an incredible and very well presented book, but also all the source (not only for the practical work, but also for the entire book! It was all written in jupyter notebooks, how amazing is that!). . Getting Setup . So far I have made it through a couple of chapters of the book, and as reccomended by the course I am starting a &quot;Deep Learning Journal&quot;, just a place online that I can track my progress, thoughts and experiments as I progress through the curriculum. There are a couple of steps that are required to get setup to make the most of the work presented, and I thought that a good place to start a blog is with some notes on how to get setup. . Juypter Notebooks . Working as a Technical Animator in video games and having written Python code for nearly a decade now, I was aware of juypter notebooks, but I felt that as it was only useful for creating &quot;pretty comments&quot; inline with your code. Yes it would be cool to have an animated gif as part of your documentation but how useful are they in reality? It turns out that they are awesome! I am writing this very blog post using them right now and I am really impressed. The fastai team have created this entire blogging platform fastpages to help people get up and running quickly. Jeremy from fastai has also created a great talk about the power of notebooks and their platform nbdev here which is worth a watch. . Anaconda Navigator . Getting set up with juypter on Windows 10 is painless, there is an incredible tool called Anaconda Navaigator, an all in one data science toolkit for python that can also manage your packages and your environments through a simple interface. No more package dependency hell, especially when installing large packages for deep learning. Simply follow the link above and download the graphical installer for your OS. Once installed, you can launch your juypter notebook environment here: . . Fastpages . Fastpages the platform I am using to setup your blog is incredibly simple and the team at fast.ai have documented the process amazingly, simply stepping through the documentation will allow you to copy their directory as a template along with all of the GitHub actions that will build and display your blog. You can see the documentation here . . Paperspace Gradient . Another fantastic facet of the course is that they don&#39;t encourage you to wade into the murky world of systems administration setting up packages, environments and GPU compliant kernels to get you up and running working with state-of-the-art deep learning models. They instead encourage you to look into using a Server Notebook, they reccommend either Collab, Gradient or Sagemaker. I chose Paperspace Gradient and I am very happy with my choice. . Microsoft Azure . By far the most frustrating part of the set up for the course has nothing to do with Python, the notebook server, GitHub or fast.ai. In Chapter 2 of the book, the course encourages you to set up a Microsoft Azure account to get an API key so you can use their Image Search conginitive service to pull training images from the web to train a classifier model. Unfortunately the documentation on the site and the forum isn&#39;t incredibly helpful, so I am logging it here incase anyone should find it useful, but mainly if I have to do this again on another account I can remeber how and where to find everything. . Go to: https://azure.microsoft.com/en-gb/services/cognitive-services/ . . Scroll to the API&#39;s section of the page, and select &quot;Web Search&quot; . . This will redirect you to https://www.microsoft.com/en-us/bing/apis/bing-web-search-api . . Ensuring you already have an Azure account, this will take you to the console to create a Bing resource . . Once you have filled in the details and created your resource it will take you to your Azure dashboard . . Go to the &quot;Keys and Endpoint&quot; tab, this is where you can find your Bing Image Search Api Key . . Now that you have your API key and replaced the XXX value in the Chapter 2 notebook, there is once more piece of code required to get the code in Chapter to work, below is a re-write of the search_images_bing definition, simply paste it as a code cell above where it is being called in notebook. Everything should work for you now. . def search_images_bing(subscription_key, search_term, size = 150): search_url = &quot;https://api.bing.microsoft.com/v7.0/images/search&quot; headers = {&quot;Ocp-Apim-Subscription-Key&quot; : subscription_key} params = {&quot;q&quot;: search_term, &quot;license&quot;: &quot;public&quot;, &quot;imageType&quot;: &quot;photo&quot;, &quot;count&quot;: size} response = requests.get(search_url, headers=headers, params=params) response.raise_for_status() search_results = response.json() reformatted_results = L(search_results[&quot;value&quot;], use_list=True) # Uses the FastAI class L, a # &quot;drop-in&quot; replacement for Lists. Mixes Python standard library and numpy arrays. # I&#39;m putting this here so, again, we minimize the amount of individual cells rewritten. # Many of the later cells assume .attrgot is a valid thing you can call. for result in reformatted_results: result[&quot;content_url&quot;] = result[&quot;contentUrl&quot;] # Bing changed their API. They return contentUrl instead of content_url. # Again, this will help in the long run. return reformatted_results .",
            "url": "https://bailey-deep-learning.github.io/im_sorry_dave/jupyter/2020/12/01/HAL-O-World.html",
            "relUrl": "/jupyter/2020/12/01/HAL-O-World.html",
            "date": " • Dec 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://bailey-deep-learning.github.io/im_sorry_dave/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://bailey-deep-learning.github.io/im_sorry_dave/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}